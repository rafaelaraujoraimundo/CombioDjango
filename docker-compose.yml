version: '3'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - static-data:/app/staticfiles
      - media-data:/app/media
    command: >
      sh -c "python manage.py collectstatic --no-input &&
             gunicorn combio.wsgi:application -b 0.0.0.0:8000 --workers 4"
    depends_on:
      - redis
  redis:
    image: "redis:6.2-alpine"
    
  celery:
    build: .
    command: celery -A combio worker -l INFO
    volumes:
      - .:/app
    environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
    depends_on:
      - redis

  celery-beat:
    build: .
    command: celery -A combio beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
    depends_on:
      - redis


  nginx:
    image: "nginx:1.21.6-alpine"
    ports:
      - "810:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static-data:/app/staticfiles
      - media-data:/app/media
    depends_on:
      - app

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: rafael.araujo@combioenergia.com
      PGADMIN_DEFAULT_PASSWORD: Combio@2024
    volumes:
      - ./docker/pgadmin:/var/lib/pgadmin
    ports:
      - "81:80"
    restart: unless-stopped

  portainer:
    image: "portainer/portainer-ce:latest"
    ports:
      - "9000:9000"
    volumes:
      - ./docker/portainer/data:/data


  # set file ownership
  zrok-init:
    image: busybox
    # matches uid:gid of "ziggy" in zrok container image
    command: chown -Rc 2171:2171 /mnt/
    user: root
    volumes:
      - zrok_env:/mnt

  # enable zrok environment
  zrok-enable:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    depends_on:
      zrok-init:
        condition: service_completed_successfully
    entrypoint: zrok-enable.bash
    volumes:
      - ./docker/zrok/data:/mnt
    environment:
      HOME: /mnt
      ZROK_ENABLE_TOKEN:
      ZROK_API_ENDPOINT:
      ZROK_ENVIRONMENT_NAME:

  # reserve zrok frontend subdomain and start sharing the target
  zrok-share: 
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    restart: unless-stopped
    entrypoint: zrok-share.bash
    depends_on:
      nginx:
        condition: service_started
      zrok-enable:
        condition: service_completed_successfully
      
    volumes:
      - ./docker/zrok/data:/mnt
    environment:
      # internal configuration
      HOME: /mnt  # zrok homedir in container

      # most relevant options
      ZROK_UNIQUE_NAME:      "${ZROK_UNIQUE_NAME}" # name is used to construct frontend domain name, e.g. "myapp" in "myapp.share.zrok.io"
      ZROK_BACKEND_MODE:    ${ZROK_BACKEND_MODE} # web, caddy, drive, proxy
      ZROK_TARGET:          "${ZROK_TARGET_DEV}" # backend target, is a path in container filesystem unless proxy mode
      ZROK_INSECURE:        # "--insecure" if proxy target has unverifiable TLS server certificate
      ZROK_OAUTH_PROVIDER:  # google, github
      ZROK_OAUTH_EMAILS:    # allow space-separated list of OAuth email address glob patterns
      ZROK_BASIC_AUTH:      # username:password, mutually-exclusive with ZROK_OAUTH_PROVIDER

      # least relevant options
      ZROK_VERBOSE:           # "--verbose"
      ZROK_SHARE_OPTS:        # additional arguments to "zrok reserve public" command
      ZROK_FRONTENDS:         # "public"
      PFXLOG_NO_JSON: "true"  # suppress JSON logging format

  # demo server
  zrok-test:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    command: test endpoint --address 0.0.0.0  # 9090

volumes:
  static-data:
  media-data:
  zrok_env:
    driver: local
    driver_opts:
      type: 'none'
      device: './docker/zrok/data'
      o: 'bind'